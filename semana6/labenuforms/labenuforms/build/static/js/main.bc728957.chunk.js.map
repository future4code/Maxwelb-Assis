{"version":3,"sources":["components/etapa1.js","components/etapa2.js","components/etapa3.js","components/final.js","App.js","serviceWorker.js","index.js"],"names":["Etapa1","render","className","Etapa2","Etapa3","Final","App","state","etapa","renderizaEtapa","irParaProximaEtapa","proximaEtapa","setState","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAMO,SAASA,IAEhB,OADAC,cAEI,yBAAKC,UAAU,cACf,sDACA,kDACA,gCACA,iDACA,gCACA,iDACA,gCACA,yDACA,gCACI,2DACA,yDACA,8DACA,6DACK,8BCjBN,SAASC,IAEhB,OADAF,cAEI,yBAAKC,UAAU,eACX,8EACA,8CACA,gCACA,yDACA,gCAAe,8BCRhB,SAASE,IAEhB,OADAH,cAEI,yBAAKC,UAAU,eACX,4EACA,8FACA,gCACA,uEACA,gCACI,iDACA,oDACK,8BCXV,SAASG,IAEhB,OADAJ,cAEI,yBAAKC,UAAU,OACX,mDACA,qFASOG,ICkCCC,E,4MA5CdC,MAAQ,CACNC,MAAO,G,EAGVC,eAAiB,WACf,OAAQ,EAAKF,MAAMC,OACjB,KAAK,EACH,OAAO,kBAACR,EAAD,MAER,KAAK,EACH,OAAO,kBAACG,EAAD,MAER,KAAK,EACH,OAAO,kBAACC,EAAD,MAET,KAAK,EACH,OAAO,kBAACC,EAAD,MACR,QACE,S,EAKVK,mBAAqB,WACrB,IACMC,EADa,EAAKJ,MAAMC,MACI,EAElC,EAAKI,SAAS,CAACJ,MAAOG,K,uDAOpB,OACE,yBAAKT,UAAU,aACZW,KAAKJ,iBACN,4BAAQK,QAASD,KAAKH,oBAAtB,yB,GAtCYK,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc728957.chunk.js","sourcesContent":["import React from 'react'\r\nimport { render } from \"@testing-library/react\";\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nexport function Etapa1() {\r\nrender() \r\nreturn (\r\n    <div className=\"formulario\">\r\n    <h3>ETAPA 1 - DADOS GERAIS</h3>\r\n    <p>1. Qual o seu nome?</p>\r\n    <input></input>\r\n    <p>2. Qual sua idade?</p>\r\n    <input></input>\r\n    <p>3. Qual seu email?</p>\r\n    <input></input>\r\n    <p>4. Qual a sua escolaridade</p>\r\n    <select>\r\n        <option>Ensino medio incompleto</option>\r\n        <option>Ensino medio completo</option>\r\n        <option>Ensino superior incompleto</option>\r\n        <option>Ensino superiot completo</option>\r\n    </select><br/>\r\n    </div>\r\n)\r\n\r\n\r\n}\r\n\r\nexport default Etapa1","import React from 'react'\r\nimport { render } from \"@testing-library/react\";\r\n\r\n\r\n\r\n\r\nexport function Etapa2() {\r\nrender() \r\nreturn (\r\n    <div className=\"formulario2\">\r\n        <h3>ETAPA 2 - INFORMAÇÕES DO ENSINO SUPERIOR</h3>\r\n        <p>5. Qual o curso</p>\r\n        <input></input>\r\n        <p>6.Qual a unidade de ensino</p>\r\n        <input></input><br/>\r\n        \r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n)\r\n}\r\n\r\n\r\nexport default Etapa2","import React from 'react'\r\nimport { render } from \"@testing-library/react\";\r\n\r\n\r\n\r\n\r\nexport function Etapa3() {\r\nrender() \r\nreturn (\r\n    <div className=\"formulario3\">\r\n        <h3>ETAPA 3 - INFORMAÇÕES GERAIS DE ENSINO</h3>\r\n        <p>7. Por que você não terminou um curso de graduação?</p>\r\n        <input></input>\r\n        <p>8. Você fez algum curso complementar?</p>\r\n        <select>\r\n            <option>Curso tecnico</option>\r\n            <option>Curso de ingles</option>\r\n        </select><br/>\r\n        \r\n        \r\n    </div>\r\n\r\n)\r\n}\r\n\r\n\r\nexport default Etapa3","import React from 'react'\r\nimport { render } from \"@testing-library/react\";\r\n\r\n\r\n\r\n\r\nexport function Final() {\r\nrender() \r\nreturn (\r\n    <div className=\"fim\">\r\n        <h3>O formulario Acabou</h3>\r\n        <p>Muito obrigado por participar! Entraremos em contato!</p>\r\n        \r\n    </div>\r\n\r\n)\r\n}\r\n\r\n\r\n\r\nexport default Final","import React from 'react';\nimport './App.css';\nimport { Etapa1 } from './components/etapa1.js';\nimport { Etapa2 } from './components/etapa2.js';\nimport { Etapa3 } from './components/etapa3.js';\nimport { Final } from './components/final.js';\nimport styled from 'styled-components';\n\n\nclass App extends React.Component {\n  state = {\n    etapa: 1,\n  }\n  \n renderizaEtapa = () =>{\n   switch (this.state.etapa) {\n     case 1:\n       return <Etapa1 />\n      break\n      case 2:\n        return <Etapa2 />\n       break\n       case 3:\n         return <Etapa3 /> \n        break\n       case 4:\n         return <Final /> \n        default:\n          return \n   }\n\n }\n\nirParaProximaEtapa = () => {\nconst etapaAtual = this.state.etapa\nconst proximaEtapa = etapaAtual + 1\n\nthis.setState({etapa: proximaEtapa})\n\n\n}\n\n\nrender () {\n  return (\n    <div className=\"finalform\">\n      {this.renderizaEtapa()}\n      <button onClick={this.irParaProximaEtapa}>Próxima Etapa</button>\n    </div>\n  )\n}\n}\n\n\n export default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}